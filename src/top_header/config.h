#pragma once
#include "common.h"
const uint32_t FETCH_WIDTH = 2;
const uint32_t DECODE_WIDTH = 2;
const uint32_t RENAME_WIDTH = 2;
const uint32_t READREG_WIDTH = 2;
const uint32_t ISSUE_WIDTH = 2;
const uint32_t COMMIT_WIDTH = 2;

const uint32_t PHY_REG_NUM = 512;
const uint32_t ARCH_REG_NUM = 32;

const uint32_t FETCH_DECODE_FIFO_SIZE = 256;
const uint32_t DECODE_RENAME_FIFO_SIZE = 256;
const uint32_t ISSUE_QUEUE_SIZE = 256;
const uint32_t ROB_SIZE = 8 + 8 * 16 + ISSUE_QUEUE_SIZE + 4;
const uint32_t CHECKPOINT_BUFFER_SIZE = ROB_SIZE + FETCH_DECODE_FIFO_SIZE + DECODE_RENAME_FIFO_SIZE;
const uint32_t ALU_UNIT_NUM = 2;
const uint32_t BRU_UNIT_NUM = 1;
const uint32_t CSR_UNIT_NUM = 1;
const uint32_t DIV_UNIT_NUM = 1;
const uint32_t LSU_UNIT_NUM = 1;
const uint32_t MUL_UNIT_NUM = 2;

const uint32_t EXECUTE_UNIT_NUM = ALU_UNIT_NUM + BRU_UNIT_NUM + CSR_UNIT_NUM + DIV_UNIT_NUM + LSU_UNIT_NUM + MUL_UNIT_NUM;

const uint32_t GSHARE_PC_P1_ADDR_WIDTH = 12;
const uint32_t GSHARE_PC_P2_ADDR_WIDTH = 6;
const uint32_t GSHARE_GLOBAL_HISTORY_WIDTH = GSHARE_PC_P1_ADDR_WIDTH;
const uint32_t GSHARE_PHT_ADDR_WIDTH = GSHARE_PC_P1_ADDR_WIDTH + GSHARE_PC_P2_ADDR_WIDTH;
const uint32_t GSHARE_PHT_SIZE = 1U << GSHARE_PHT_ADDR_WIDTH;
const uint32_t GSHARE_PC_P1_ADDR_MASK = (1U << GSHARE_PC_P1_ADDR_WIDTH) - 1U;
const uint32_t GSHARE_PC_P2_ADDR_MASK = (1U << GSHARE_PC_P2_ADDR_WIDTH) - 1U;
const uint32_t GSHARE_GLOBAL_HISTORY_MASK = (1U << GSHARE_GLOBAL_HISTORY_WIDTH) - 1U;

const uint32_t LOCAL_PC_P1_ADDR_WIDTH = 18;
const uint32_t LOCAL_PC_P2_ADDR_WIDTH = 12;
const uint32_t LOCAL_PC_P3_ADDR_WIDTH = 6;
const uint32_t LOCAL_BHT_ADDR_WIDTH = LOCAL_PC_P1_ADDR_WIDTH;
const uint32_t LOCAL_BHT_SIZE = 1U << LOCAL_BHT_ADDR_WIDTH;
const uint32_t LOCAL_BHT_WIDTH = LOCAL_PC_P2_ADDR_WIDTH;
const uint32_t LOCAL_PHT_ADDR_WIDTH = LOCAL_PC_P2_ADDR_WIDTH + LOCAL_PC_P3_ADDR_WIDTH;
const uint32_t LOCAL_PHT_SIZE = 1U << LOCAL_PHT_ADDR_WIDTH;
const uint32_t LOCAL_PC_P1_ADDR_MASK = (1U << LOCAL_PC_P1_ADDR_WIDTH) - 1U;
const uint32_t LOCAL_PC_P2_ADDR_MASK = (1U << LOCAL_PC_P2_ADDR_WIDTH) - 1U;
const uint32_t LOCAL_PC_P3_ADDR_MASK = (1U << LOCAL_PC_P3_ADDR_WIDTH) - 1U;
const uint32_t LOCAL_BHT_WIDTH_MASK = (1U << LOCAL_BHT_WIDTH) - 1U;

const uint32_t RAS_SIZE = 256;

const uint32_t CALL_PC_P1_ADDR_WIDTH = 12;
const uint32_t CALL_PC_P2_ADDR_WIDTH = 6;
const uint32_t CALL_GLOBAL_HISTORY_WIDTH = CALL_PC_P1_ADDR_WIDTH;
const uint32_t CALL_TARGET_CACHE_ADDR_WIDTH = CALL_PC_P1_ADDR_WIDTH + CALL_PC_P2_ADDR_WIDTH;
const uint32_t CALL_TARGET_CACHE_SIZE = 1U << CALL_TARGET_CACHE_ADDR_WIDTH;
const uint32_t CALL_PC_P1_ADDR_MASK = (1U << CALL_PC_P1_ADDR_WIDTH) - 1U;
const uint32_t CALL_PC_P2_ADDR_MASK = (1U << CALL_PC_P2_ADDR_WIDTH) - 1U;
const uint32_t CALL_GLOBAL_HISTORY_MASK = (1U << CALL_GLOBAL_HISTORY_WIDTH) - 1U;

const uint32_t NORMAL_PC_P1_ADDR_WIDTH = 12;
const uint32_t NORMAL_PC_P2_ADDR_WIDTH = 6;
const uint32_t NORMAL_GLOBAL_HISTORY_WIDTH = NORMAL_PC_P1_ADDR_WIDTH;
const uint32_t NORMAL_TARGET_CACHE_ADDR_WIDTH = NORMAL_PC_P1_ADDR_WIDTH + NORMAL_PC_P2_ADDR_WIDTH;
const uint32_t NORMAL_TARGET_CACHE_SIZE = 1U << NORMAL_TARGET_CACHE_ADDR_WIDTH;
const uint32_t NORMAL_PC_P1_ADDR_MASK = (1U << NORMAL_PC_P1_ADDR_WIDTH) - 1U;
const uint32_t NORMAL_PC_P2_ADDR_MASK = (1U << NORMAL_PC_P2_ADDR_WIDTH) - 1U;
const uint32_t NORMAL_GLOBAL_HISTORY_MASK = (1U << NORMAL_GLOBAL_HISTORY_WIDTH) - 1U;