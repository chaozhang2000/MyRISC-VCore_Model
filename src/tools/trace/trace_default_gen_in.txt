        this->tdb.mark_signal(trace::domain_t::input, "intif_commit_has_interrupt", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::input, "intif_commit_mcause_data", sizeof(uint32_t), 1);
		this->tdb.mark_signal(trace::domain_t::input, "intif_commit_ack_data", sizeof(uint32_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_intif_ack_data", sizeof(uint32_t), 1);

		this->tdb.mark_signal(trace::domain_t::output, "commit_bp_pc", sizeof(uint32_t), COMMIT_WIDTH);
		this->tdb.mark_signal(trace::domain_t::output, "commit_bp_instruction", sizeof(uint32_t), COMMIT_WIDTH);
		this->tdb.mark_signal(trace::domain_t::output, "commit_bp_jump", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_bp_next_pc", sizeof(uint32_t), COMMIT_WIDTH);
		this->tdb.mark_signal(trace::domain_t::output, "commit_bp_hit", sizeof(uint8_t), COMMIT_WIDTH);
		this->tdb.mark_signal(trace::domain_t::output, "commit_bp_valid", sizeof(uint8_t), COMMIT_WIDTH);

		this->tdb.mark_signal(trace::domain_t::output, "commit_cpbuf_id", sizeof(uint16_t), COMMIT_WIDTH);
		this->tdb.mark_signal_bitmap(trace::domain_t::input, "cpbuf_commit_data.rat_phy_map_table_valid", PHY_REG_NUM, COMMIT_WIDTH);
        this->tdb.mark_signal_bitmap(trace::domain_t::input, "cpbuf_commit_data.rat_phy_map_table_visible", PHY_REG_NUM, COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "cpbuf_commit_data.global_history", sizeof(uint16_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "cpbuf_commit_data.local_history", sizeof(uint16_t), COMMIT_WIDTH);
		this->tdb.mark_signal(trace::domain_t::output, "commit_cpbuf_pop", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_cpbuf_flush", sizeof(uint8_t), 1);

		this->tdb.mark_signal_bitmap(trace::domain_t::output, "commit_rat_map_table_valid", PHY_REG_NUM, 1);
        this->tdb.mark_signal_bitmap(trace::domain_t::output, "commit_rat_map_table_visible", PHY_REG_NUM, 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_rat_map_table_restore", sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::output, "commit_rat_release_phy_id", sizeof(uint8_t), COMMIT_WIDTH);
		this->tdb.mark_signal(trace::domain_t::output, "commit_rat_release_phy_id_valid", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_rat_release_map", sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::output, "commit_rat_commit_phy_id", sizeof(uint8_t), COMMIT_WIDTH);
		this->tdb.mark_signal(trace::domain_t::output, "commit_rat_commit_phy_id_valid", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_rat_commit_map", sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::output, "commit_rat_restore_new_phy_id", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_rat_restore_old_phy_id", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_rat_restore_map", sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::output, "commit_csrf_read_addr", sizeof(uint16_t), 4);
		this->tdb.mark_signal(trace::domain_t::input, "commit_csrf_read_data", sizeof(uint32_t), 4);
		this->tdb.mark_signal(trace::domain_t::output, "commit_csrf_write_addr", sizeof(uint16_t), 4);
		this->tdb.mark_signal(trace::domain_t::output, "commit_csrf_write_data", sizeof(uint32_t), 4);
		this->tdb.mark_signal(trace::domain_t::output, "commit_csrf_we", sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::input, "csrf_all_mstatus_data", sizeof(uint32_t), 1);

		this->tdb.mark_signal(trace::domain_t::output, "commit_csrf_branch_num_add", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_csrf_branch_predicted_add", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_csrf_branch_hit_add", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_csrf_branch_miss_add", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_csrf_commit_num_add", sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::output, "commit_rob_next_id", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::input, "rob_commit_next_id_valid", sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_tail_id", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_tail_id_valid", sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::output, "commit_rob_flush_id", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.new_phy_reg_id", sizeof(uint8_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.old_phy_reg_id", sizeof(uint8_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.old_phy_reg_id_valid", sizeof(uint8_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.finish", sizeof(uint8_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.pc", sizeof(uint32_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.inst_value", sizeof(uint32_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.has_exception", sizeof(uint8_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.exception_id", sizeof(uint32_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.exception_value", sizeof(uint32_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.predicted", sizeof(uint8_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.predicted_jump", sizeof(uint8_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.predicted_next_pc", sizeof(uint32_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.checkpoint_id_valid", sizeof(uint8_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.checkpoint_id", sizeof(uint16_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.bru_op", sizeof(uint8_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.bru_jump", sizeof(uint8_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.bru_next_pc", sizeof(uint32_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.is_mret", sizeof(uint8_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.csr_addr", sizeof(uint16_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.csr_newvalue", sizeof(uint32_t), 1);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_data.csr_newvalue_valid", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_next_id", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::input, "rob_commit_flush_next_id_valid", sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_id", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.new_phy_reg_id", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.old_phy_reg_id", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.old_phy_reg_id_valid", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.finish", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.pc", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.inst_value", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.has_exception", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.exception_id", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.exception_value", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.predicted", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.predicted_jump", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.predicted_next_pc", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.checkpoint_id_valid", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.checkpoint_id", sizeof(uint16_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.bru_op", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.bru_jump", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.bru_next_pc", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.is_mret", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.csr_addr", sizeof(uint16_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.csr_newvalue", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data.csr_newvalue_valid", sizeof(uint8_t), EXECUTE_UNIT_NUM);
		this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.new_phy_reg_id", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.old_phy_reg_id", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.old_phy_reg_id_valid", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.finish", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.pc", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.inst_value", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.has_exception", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.exception_id", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.exception_value", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.predicted", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.predicted_jump", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.predicted_next_pc", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.checkpoint_id_valid", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.checkpoint_id", sizeof(uint16_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.bru_op", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.bru_jump", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.bru_next_pc", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.is_mret", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.csr_addr", sizeof(uint16_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.csr_newvalue", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_input_data.csr_newvalue_valid", sizeof(uint8_t), EXECUTE_UNIT_NUM);
		this->tdb.mark_signal(trace::domain_t::output, "commit_rob_input_data_we", sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_head_id", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_head_id_valid" ,sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::output, "commit_rob_retire_id", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.new_phy_reg_id", sizeof(uint8_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.old_phy_reg_id", sizeof(uint8_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.old_phy_reg_id_valid", sizeof(uint8_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.finish", sizeof(uint8_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.pc", sizeof(uint32_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.inst_value", sizeof(uint32_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.has_exception", sizeof(uint8_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.exception_id", sizeof(uint32_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.exception_value", sizeof(uint32_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.predicted", sizeof(uint8_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.predicted_jump", sizeof(uint8_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.predicted_next_pc", sizeof(uint32_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.checkpoint_id_valid", sizeof(uint8_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.checkpoint_id", sizeof(uint16_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.bru_op", sizeof(uint8_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.bru_jump", sizeof(uint8_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.bru_next_pc", sizeof(uint32_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.is_mret", sizeof(uint8_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.csr_addr", sizeof(uint16_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.csr_newvalue", sizeof(uint32_t), COMMIT_WIDTH);
        this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_data.csr_newvalue_valid", sizeof(uint8_t), COMMIT_WIDTH);
		this->tdb.mark_signal(trace::domain_t::input, "rob_commit_retire_id_valid", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_rob_retire_pop", sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::output, "commit_phyf_id", sizeof(uint8_t), COMMIT_WIDTH);
		this->tdb.mark_signal(trace::domain_t::output, "commit_phyf_invalid", sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::output, "commit_phyf_flush_id", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_phyf_flush_invalid", sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::output, "commit_phyf_data_valid", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_phyf_data_valid_restore", sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.enable", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.value", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.valid", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.rob_id", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.pc", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.imm", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.has_exception", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.exception_id", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.exception_value", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.predicted", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.predicted_jump", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.predicted_next_pc", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.checkpoint_id_valid", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.checkpoint_id", sizeof(uint16_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.bru_jump", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.bru_next_pc", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.rs1", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.arg1_src", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.rs1_need_map", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.rs1_phy", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.src1_value", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.src1_loaded", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.rs2", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.arg2_src", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.rs2_need_map", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.rs2_phy", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.src2_value", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.src2_loaded", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.rd", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.rd_enable", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.need_rename", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.rd_phy", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.rd_value", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.csr", sizeof(uint16_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.csr_newvalue", sizeof(uint32_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.csr_newvalue_valid", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.op", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.op_unit", sizeof(uint8_t), EXECUTE_UNIT_NUM);
        this->tdb.mark_signal(trace::domain_t::input, "wb_commit_port_data_out.sub_op", sizeof(uint8_t), EXECUTE_UNIT_NUM);

		this->tdb.mark_signal(trace::domain_t::input, "rob_commit_empty", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::input, "rob_commit_full", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_rob_flush", sizeof(uint8_t), 1);

		this->tdb.mark_signal(trace::domain_t::output, "commit_feedback_pack.enable", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_feedback_pack.next_handle_rob_id_valid", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_feedback_pack.next_handle_rob_id", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_feedback_pack.has_exception", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_feedback_pack.exception_pc", sizeof(uint32_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_feedback_pack.flush", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_feedback_pack.committed_rob_id", sizeof(uint8_t), COMMIT_WIDTH);
		this->tdb.mark_signal(trace::domain_t::output, "commit_feedback_pack.committed_rob_id_valid", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_feedback_pack.jump_enable", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_feedback_pack.jump", sizeof(uint8_t), 1);
		this->tdb.mark_signal(trace::domain_t::output, "commit_feedback_pack.next_pc", sizeof(uint32_t), 1);