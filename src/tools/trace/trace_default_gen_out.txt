        
        for(auto i = 0;i < RENAME_WIDTH;i++)
        {
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_cpbuf_id", 0, i);
            this->tdb.update_signal_bitmap_all(trace::domain_t::output, "rename_cpbuf_data.rat_phy_map_table_valid", 0, i);
            this->tdb.update_signal_bitmap_all(trace::domain_t::output, "rename_cpbuf_data.rat_phy_map_table_visible", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::output, "rename_cpbuf_data.global_history", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::output, "rename_cpbuf_data.local_history", 0, i);
        }

        this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_cpbuf_we", 0, 0);
        
        for(auto i = 0;i < RENAME_WIDTH;i++)
        {
            this->tdb.update_signal<uint16_t>(trace::domain_t::input, "cpbuf_rename_data.global_history", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::input, "cpbuf_rename_data.local_history", 0, i);
    
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rat_rename_new_phy_id", 0, i);
        }

        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rat_rename_new_phy_id_valid", 0, 0);
        
        for(auto i = 0;i < RENAME_WIDTH;i++)
        {
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rat_phy_id", 0, i);
        }

        this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rat_phy_id_valid", 0, 0);
        
        for(auto i = 0;i < RENAME_WIDTH;i++)
        {
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rat_arch_id", 0, i);
        }

        this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rat_map", 0, 0);

        this->tdb.update_signal_bitmap_all(trace::domain_t::input, "rat_rename_map_table_valid", 0, 0);
        this->tdb.update_signal_bitmap_all(trace::domain_t::input, "rat_rename_map_table_visible", 0, 0);

        
        for(auto i = 0;i < RENAME_WIDTH * 2;i++)
        {
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rat_read_arch_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rat_rename_read_phy_id", 0, i);
        }

        for(auto i = 0;i < RENAME_WIDTH;i++)
        {
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_rename_new_id", 0, i);
        }

        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_rename_new_id_valid", 0, 0);

        
        for(auto i = 0;i < RENAME_WIDTH;i++)
        {
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rob_data.new_phy_reg_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rob_data.old_phy_reg_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rob_data.old_phy_reg_id_valid", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rob_data.finish", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "rename_rob_data.pc", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "rename_rob_data.inst_value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rob_data.has_exception", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "rename_rob_data.exception_id", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "rename_rob_data.exception_value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rob_data.predicted", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rob_data.predicted_jump", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "rename_rob_data.predicted_next_pc", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "rename_rob_data.checkpoint_id_valid", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rob_data.checkpoint_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rob_data.bru_op", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rob_data.bru_jump", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "rename_rob_data.bru_next_pc", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rob_data.is_mret", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::output, "rename_rob_data.csr_addr", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "rename_rob_data.csr_newvalue", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rob_data.csr_newvalue_valid", 0, i);
        }

        this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rob_data_valid", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_rob_push", 0, 0);

        this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_csrf_phy_regfile_full_add", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_csrf_rob_full_add", 0, 0);
        
        
        for(auto i = 0;i < RENAME_WIDTH;i++)
        {
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.enable", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "decode_rename_fifo_data_out.value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.valid", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "decode_rename_fifo_data_out.pc", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "decode_rename_fifo_data_out.imm", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.has_exception", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "decode_rename_fifo_data_out.exception_id", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "decode_rename_fifo_data_out.exception_value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.predicted", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.predicted_jump", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "decode_rename_fifo_data_out.predicted_next_pc", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.checkpoint_id_valid", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::input, "decode_rename_fifo_data_out.checkpoint_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.rs1", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.arg1_src", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.rs1_need_map", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.rs2", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.arg2_src", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.rs2_need_map", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.rd", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.rd_enable", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.need_rename", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::input, "decode_rename_fifo_data_out.csr", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.op", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.op_unit", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out.sub_op", 0, i);
        }

        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "decode_rename_fifo_data_out_valid", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::output, "decode_rename_fifo_data_pop_valid", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::output, "decode_rename_fifo_pop", 0, 0);

        
        for(auto i = 0;i < RENAME_WIDTH;i++)
        {
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.enable", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "rename_readreg_port_data_in.value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.valid", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.rob_id", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "rename_readreg_port_data_in.pc", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "rename_readreg_port_data_in.imm", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.has_exception", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "rename_readreg_port_data_in.exception_id", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "rename_readreg_port_data_in.exception_value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.predicted", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.predicted_jump", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "rename_readreg_port_data_in.predicted_next_pc", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.checkpoint_id_valid", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::output, "rename_readreg_port_data_in.checkpoint_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.rs1", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.arg1_src", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.rs1_need_map", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.rs1_phy", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.rs2", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.arg2_src", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.rs2_need_map", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.rs2_phy", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.rd", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.rd_enable", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.need_rename", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.rd_phy", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::output, "rename_readreg_port_data_in.csr", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.op", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.op_unit", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_data_in.sub_op", 0, i);
        }

        this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_we", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_readreg_port_flush", 0, 0);

        this->tdb.update_signal<uint8_t>(trace::domain_t::output, "rename_feedback_pack.idle", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "issue_feedback_pack.stall", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "commit_feedback_pack.enable", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "commit_feedback_pack.flush", 0, 0);
