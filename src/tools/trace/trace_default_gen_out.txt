        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "intif_commit_has_interrupt", 0, 0);
		this->tdb.update_signal<uint32_t>(trace::domain_t::input, "intif_commit_mcause_data", 0, 0);
		this->tdb.update_signal<uint32_t>(trace::domain_t::input, "intif_commit_ack_data", 0, 0);
		this->tdb.update_signal<uint32_t>(trace::domain_t::output, "commit_intif_ack_data", 0, 0);

        
        for(auto i = 0;i < COMMIT_WIDTH;i++)
        {
    		this->tdb.update_signal<uint32_t>(trace::domain_t::output, "commit_bp_pc", 0, i);
    		this->tdb.update_signal<uint32_t>(trace::domain_t::output, "commit_bp_instruction", 0, i);
        }

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_bp_jump", 0, 0);
        
        for(auto i = 0;i < COMMIT_WIDTH;i++)
        {
    		this->tdb.update_signal<uint32_t>(trace::domain_t::output, "commit_bp_next_pc", 0, i);
    		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_bp_hit", 0, i);
    		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_bp_valid", 0, i);
    
    		this->tdb.update_signal<uint16_t>(trace::domain_t::output, "commit_cpbuf_id", 0, i);
    		this->tdb.update_signal_bitmap_all(trace::domain_t::input, "cpbuf_commit_data.rat_phy_map_table_valid", 0, i);
            this->tdb.update_signal_bitmap_all(trace::domain_t::input, "cpbuf_commit_data.rat_phy_map_table_visible", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::input, "cpbuf_commit_data.global_history", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::input, "cpbuf_commit_data.local_history", 0, i);
        }

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_cpbuf_pop", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_cpbuf_flush", 0, 0);

		this->tdb.update_signal_bitmap_all(trace::domain_t::output, "commit_rat_map_table_valid", 0, 0);
        this->tdb.update_signal_bitmap_all(trace::domain_t::output, "commit_rat_map_table_visible", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rat_map_table_restore", 0, 0);

        
        for(auto i = 0;i < COMMIT_WIDTH;i++)
        {
    		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rat_release_phy_id", 0, i);
        }

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rat_release_phy_id_valid", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rat_release_map", 0, 0);

        
        for(auto i = 0;i < COMMIT_WIDTH;i++)
        {
    		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rat_commit_phy_id", 0, i);
        }

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rat_commit_phy_id_valid", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rat_commit_map", 0, 0);

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rat_restore_new_phy_id", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rat_restore_old_phy_id", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rat_restore_map", 0, 0);

        
        for(auto i = 0;i < 4;i++)
        {
    		this->tdb.update_signal<uint16_t>(trace::domain_t::output, "commit_csrf_read_addr", 0, i);
    		this->tdb.update_signal<uint32_t>(trace::domain_t::input, "commit_csrf_read_data", 0, i);
    		this->tdb.update_signal<uint16_t>(trace::domain_t::output, "commit_csrf_write_addr", 0, i);
    		this->tdb.update_signal<uint32_t>(trace::domain_t::output, "commit_csrf_write_data", 0, i);
        }

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_csrf_we", 0, 0);

		this->tdb.update_signal<uint32_t>(trace::domain_t::input, "csrf_all_mstatus_data", 0, 0);

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_csrf_branch_num_add", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_csrf_branch_predicted_add", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_csrf_branch_hit_add", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_csrf_branch_miss_add", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_csrf_commit_num_add", 0, 0);

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_next_id", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_next_id_valid", 0, 0);

		this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_tail_id", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_tail_id_valid", 0, 0);

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_flush_id", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_data.new_phy_reg_id", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_data.old_phy_reg_id", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_data.old_phy_reg_id_valid", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_data.finish", 0, 0);
        this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_flush_data.pc", 0, 0);
        this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_flush_data.inst_value", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_data.has_exception", 0, 0);
        this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_flush_data.exception_id", 0, 0);
        this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_flush_data.exception_value", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_data.predicted", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_data.predicted_jump", 0, 0);
        this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_flush_data.predicted_next_pc", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_data.checkpoint_id_valid", 0, 0);
        this->tdb.update_signal<uint16_t>(trace::domain_t::input, "rob_commit_flush_data.checkpoint_id", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_data.bru_op", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_data.bru_jump", 0, 0);
        this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_flush_data.bru_next_pc", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_data.is_mret", 0, 0);
        this->tdb.update_signal<uint16_t>(trace::domain_t::input, "rob_commit_flush_data.csr_addr", 0, 0);
        this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_flush_data.csr_newvalue", 0, 0);
        this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_data.csr_newvalue_valid", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_next_id", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_flush_next_id_valid", 0, 0);

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_input_id", 0, 0);
        
        for(auto i = 0;i < EXECUTE_UNIT_NUM;i++)
        {
    		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_input_data.new_phy_reg_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_input_data.old_phy_reg_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_input_data.old_phy_reg_id_valid", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_input_data.finish", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "commit_rob_input_data.pc", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "commit_rob_input_data.inst_value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_input_data.has_exception", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "commit_rob_input_data.exception_id", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "commit_rob_input_data.exception_value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_input_data.predicted", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_input_data.predicted_jump", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "commit_rob_input_data.predicted_next_pc", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_input_data.checkpoint_id_valid", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::output, "commit_rob_input_data.checkpoint_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_input_data.bru_op", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_input_data.bru_jump", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "commit_rob_input_data.bru_next_pc", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_input_data.is_mret", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::output, "commit_rob_input_data.csr_addr", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::output, "commit_rob_input_data.csr_newvalue", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_input_data.csr_newvalue_valid", 0, i);
    		this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_input_data.new_phy_reg_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_input_data.old_phy_reg_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_input_data.old_phy_reg_id_valid", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_input_data.finish", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_input_data.pc", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_input_data.inst_value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_input_data.has_exception", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_input_data.exception_id", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_input_data.exception_value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_input_data.predicted", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_input_data.predicted_jump", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_input_data.predicted_next_pc", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_input_data.checkpoint_id_valid", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::input, "rob_commit_input_data.checkpoint_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_input_data.bru_op", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_input_data.bru_jump", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_input_data.bru_next_pc", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_input_data.is_mret", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::input, "rob_commit_input_data.csr_addr", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_input_data.csr_newvalue", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_input_data.csr_newvalue_valid", 0, i);
        }

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_input_data_we", 0, 0);

		this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_retire_head_id", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_retire_head_id_valid" ,0, 0);

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_retire_id", 0, 0);
        
        for(auto i = 0;i < COMMIT_WIDTH;i++)
        {
    		this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_retire_data.new_phy_reg_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_retire_data.old_phy_reg_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_retire_data.old_phy_reg_id_valid", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_retire_data.finish", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_retire_data.pc", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_retire_data.inst_value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_retire_data.has_exception", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_retire_data.exception_id", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_retire_data.exception_value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_retire_data.predicted", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_retire_data.predicted_jump", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_retire_data.predicted_next_pc", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_retire_data.checkpoint_id_valid", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::input, "rob_commit_retire_data.checkpoint_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_retire_data.bru_op", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_retire_data.bru_jump", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_retire_data.bru_next_pc", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_retire_data.is_mret", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::input, "rob_commit_retire_data.csr_addr", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "rob_commit_retire_data.csr_newvalue", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_retire_data.csr_newvalue_valid", 0, i);
        }

		this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_retire_id_valid", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_retire_pop", 0, 0);

        
        for(auto i = 0;i < COMMIT_WIDTH;i++)
        {
    		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_phyf_id", 0, i);
        }

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_phyf_invalid", 0, 0);

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_phyf_flush_id", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_phyf_flush_invalid", 0, 0);

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_phyf_data_valid", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_phyf_data_valid_restore", 0, 0);

        
        for(auto i = 0;i < EXECUTE_UNIT_NUM;i++)
        {
    		this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.enable", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "wb_commit_port_data_out.value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.valid", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.rob_id", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "wb_commit_port_data_out.pc", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "wb_commit_port_data_out.imm", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.has_exception", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "wb_commit_port_data_out.exception_id", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "wb_commit_port_data_out.exception_value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.predicted", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.predicted_jump", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "wb_commit_port_data_out.predicted_next_pc", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.checkpoint_id_valid", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::input, "wb_commit_port_data_out.checkpoint_id", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.bru_jump", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "wb_commit_port_data_out.bru_next_pc", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.rs1", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.arg1_src", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.rs1_need_map", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.rs1_phy", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "wb_commit_port_data_out.src1_value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.src1_loaded", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.rs2", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.arg2_src", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.rs2_need_map", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.rs2_phy", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "wb_commit_port_data_out.src2_value", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.src2_loaded", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.rd", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.rd_enable", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.need_rename", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.rd_phy", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "wb_commit_port_data_out.rd_value", 0, i);
            this->tdb.update_signal<uint16_t>(trace::domain_t::input, "wb_commit_port_data_out.csr", 0, i);
            this->tdb.update_signal<uint32_t>(trace::domain_t::input, "wb_commit_port_data_out.csr_newvalue", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.csr_newvalue_valid", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.op", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.op_unit", 0, i);
            this->tdb.update_signal<uint8_t>(trace::domain_t::input, "wb_commit_port_data_out.sub_op", 0, i);
        }

		this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_empty", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::input, "rob_commit_full", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_rob_flush", 0, 0);

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_feedback_pack.enable", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_feedback_pack.next_handle_rob_id_valid", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_feedback_pack.next_handle_rob_id", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_feedback_pack.has_exception", 0, 0);
		this->tdb.update_signal<uint32_t>(trace::domain_t::output, "commit_feedback_pack.exception_pc", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_feedback_pack.flush", 0, 0);
        
        for(auto i = 0;i < COMMIT_WIDTH;i++)
        {
    		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_feedback_pack.committed_rob_id", 0, i);
        }

		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_feedback_pack.committed_rob_id_valid", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_feedback_pack.jump_enable", 0, 0);
		this->tdb.update_signal<uint8_t>(trace::domain_t::output, "commit_feedback_pack.jump", 0, 0);
		this->tdb.update_signal<uint32_t>(trace::domain_t::output, "commit_feedback_pack.next_pc", 0, 0);
